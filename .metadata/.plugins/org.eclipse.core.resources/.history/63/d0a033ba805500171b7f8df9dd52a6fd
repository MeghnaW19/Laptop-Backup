package com.stackroute.swisit.controller;

import com.stackroute.swisit.domain.CrawlerResult;
import com.stackroute.swisit.domain.IndicatorOf;
import com.stackroute.swisit.domain.Intent;
import com.stackroute.swisit.domain.Term;
import com.stackroute.swisit.repository.IntentRepository;
import com.stackroute.swisit.repository.TermRepository;
import com.stackroute.swisit.service.IntentParserService;
import com.stackroute.swisit.subscriber.SubsciberImpl;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Set;

@RestController
@RequestMapping(value="/v1/api/swisit/parser")
@Api(value="onlinestore", description="Operations pertaining to IntentParserService")
public class IntentParserRestController {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	IntentParserService intentParserService;
	@Autowired
	private SubsciberImpl subscriberImpl;
	@Autowired
	private MessageSource messageSource;

	@ApiOperation(value="CrawlerValue",response = CrawlerResult.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successfully retrieved Crawler"),
			@ApiResponse(code = 401, message = "You are not authorized to view the resource"),
			@ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
			@ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
	}
			)
	@RequestMapping(value="subscriber" , method=RequestMethod.GET)
	public String demo(){
		List<CrawlerResult> l=subscriberImpl.receivingMessage("tointent");
		CrawlerResult cr[]=new CrawlerResult[l.size()];
		l.toArray(cr);
		for(CrawlerResult lr:l){
			System.out.println("link is "+lr.getLink());
			System.out.println("query is "+lr.getQuery());
			System.out.println("snippet is "+lr.getSnippet());
			System.out.println("title is  "+lr.getTitle());
			System.out.println("date is "+lr.getLastindexedof());
			System.out.println("terms is "+lr.getTerms());

		}
		//System.out.println("list is "+l);
		return "success";
	}    

	@ApiOperation(value="CrawlerValue",response = CrawlerResult.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successfully retrieved Crawler"),
			@ApiResponse(code = 401, message = "You are not authorized to view the resource"),
			@ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
			@ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
	}
			)
	@RequestMapping(value = "", method= RequestMethod.POST)
	public ResponseEntity<IndicatorOf[]> calculateConfidenceScore(/*@RequestBody IntentParser[] intentParserArr, Model model*/){

		//        List<WordIntensity> wordIntensityList = new ArrayList<WordIntensity>();
		//        cCalculatorService.intentParserResult(intentParserArr);
		List<Intent> intentsList = intentParserService.getAllIntents();
		List<Term> termsList = intentParserService.getAllTerms();
		Set<Term> indicatorTerms = intentParserService.getIndicatorTerms();
		IndicatorOf[] indicatorOfs = intentParserService.getAllIndicaor();
		return new ResponseEntity<IndicatorOf[]>(indicatorOfs, HttpStatus.OK);
	}

	/*-------------------Internationalization--------------------------*/
	@RequestMapping(value = "/test", method = RequestMethod.GET)
	ResponseEntity test() {
		Locale locale = LocaleContextHolder.getLocale();
		String message = messageSource.getMessage ("user.excep.data", null, locale );
		return  new ResponseEntity(message,HttpStatus.OK);
	}
}
