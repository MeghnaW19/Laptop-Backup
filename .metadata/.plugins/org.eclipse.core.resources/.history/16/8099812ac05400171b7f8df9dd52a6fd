package com.stackroute.swisit.controller;

import com.stackroute.swisit.domain.CrawlerResult;
import com.stackroute.swisit.domain.IndicatorOf;
import com.stackroute.swisit.domain.Intent;
import com.stackroute.swisit.domain.Term;
import com.stackroute.swisit.repository.IntentRepository;
import com.stackroute.swisit.repository.TermRepository;
import com.stackroute.swisit.service.IntentParserService;
import com.stackroute.swisit.subscriber.SubsciberImpl;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@Api(value="SWIS-it", description="Operations pertaining to the SWIS-it")
@RestController
@RequestMapping(value="/parse")
public class IntentParserRestController {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    IntentParserService intentParserService;
    @Autowired
    private SubsciberImpl subscriberImpl;
    @RequestMapping(value="subscriber" , method=RequestMethod.GET)
    public String demo(){
    	List<CrawlerResult> l=subscriberImpl.receivingMessage("tointent");
    	CrawlerResult cr[]=new CrawlerResult[l.size()];
    	l.toArray(cr);
    	for(CrawlerResult lr:l){
    		System.out.println("link is "+lr.getLink());
    		System.out.println("query is "+lr.getQuery());
    		System.out.println(""+lr.getSnippet());
    		System.out.println(""+lr.getTitle());
    		System.out.println(""+lr.getLastindexedof());
    		System.out.println(""+lr.getTerms());
    		
    	}
    	System.out.println("list is "+l);
    	return "success";
    }
    
    @RequestMapping(value = "", method= RequestMethod.POST)
    public ResponseEntity<IndicatorOf[]> calculateConfidenceScore(/*@RequestBody IntentParser[] intentParserArr, Model model*/){

//        List<WordIntensity> wordIntensityList = new ArrayList<WordIntensity>();
//        cCalculatorService.intentParserResult(intentParserArr);
        List<Intent> intentsList = intentParserService.getAllIntents();
        List<Term> termsList = intentParserService.getAllTerms();
        Set<Term> indicatorTerms = intentParserService.getIndicatorTerms();
        IndicatorOf[] indicatorOfs = intentParserService.getAllIndicaor();
        return new ResponseEntity<IndicatorOf[]>(indicatorOfs, HttpStatus.OK);
    }
}
