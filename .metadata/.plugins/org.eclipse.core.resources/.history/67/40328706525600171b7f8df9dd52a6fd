package com.stackroute.swisit.controller;


import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.stackroute.swisit.domain.*;
import com.stackroute.swisit.service.IntentParseAlgo;
import com.stackroute.swisit.service.IntentParserService;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.util.*;

@Api(value="SWIS-it", description="Operations pertaining to the SWIS-it")
@RestController
@RequestMapping(value="/parse")
public class IntentParserRestController {
	
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    IntentParserService intentParserService;

    @Autowired
    IntentParseAlgo intentParseAlgo;

    @RequestMapping(value = "/fetch", method= RequestMethod.POST)
    public ResponseEntity<Iterable> fetchNeoData(){

        List<Intent> intentsList = intentParserService.getAllIntents();
        List<Term> termsList = intentParserService.getAllTerms();
        Set<Term> indicatorTerms = intentParserService.getIndicatorTerms();
        Iterable<Map<String,Object>> indicatorOfs = intentParserService.getAllIndicator();
        Iterable<Map<String,Object>> bothRelationships = intentParserService.getBothRelationships();
        Iterable<Map<String,Object>> allRelationships = intentParserService.getAllRelationships();
        Iterable<Relationships> fetchallRelationships = intentParserService.fetchAllRelationships();
        return new ResponseEntity<Iterable>(fetchallRelationships, HttpStatus.OK);
    }

    @RequestMapping(value = "", method= RequestMethod.POST)
    public ResponseEntity<List> calculateConfidenceScore() throws JsonParseException, JsonMappingException, IOException{
        ObjectMapper mapper = new ObjectMapper();
        File file = new ClassPathResource("input.json").getFile();
        IntentParserInput[] intentInput=mapper.readValue(file,IntentParserInput[].class);
        List<IntentParserResult> results=intentParseAlgo.calculateConfidence(intentInput);
        Iterable<Relationships> fetchallRelationships = intentParserService.fetchAllRelationships();
        return new ResponseEntity<List>(results, HttpStatus.OK);
    }
}
